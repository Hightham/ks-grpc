// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.22.2
// source: server.proto

package api_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChargingPointsServiceClient is the client API for ChargingPointsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChargingPointsServiceClient interface {
	// Unary RPC method
	GetChargingStation(ctx context.Context, in *LocationRequest, opts ...grpc.CallOption) (*LocationResponse, error)
	// Server-side streaming RPC method
	StreamChargingStations(ctx context.Context, in *LocationRequest, opts ...grpc.CallOption) (ChargingPointsService_StreamChargingStationsClient, error)
	// Client-side streaming RPC method
	StreamLocation(ctx context.Context, opts ...grpc.CallOption) (ChargingPointsService_StreamLocationClient, error)
	// Bidirectional streaming RPC method
	TrackLocations(ctx context.Context, opts ...grpc.CallOption) (ChargingPointsService_TrackLocationsClient, error)
}

type chargingPointsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChargingPointsServiceClient(cc grpc.ClientConnInterface) ChargingPointsServiceClient {
	return &chargingPointsServiceClient{cc}
}

func (c *chargingPointsServiceClient) GetChargingStation(ctx context.Context, in *LocationRequest, opts ...grpc.CallOption) (*LocationResponse, error) {
	out := new(LocationResponse)
	err := c.cc.Invoke(ctx, "/api_proto.ChargingPointsService/GetChargingStation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chargingPointsServiceClient) StreamChargingStations(ctx context.Context, in *LocationRequest, opts ...grpc.CallOption) (ChargingPointsService_StreamChargingStationsClient, error) {
	stream, err := c.cc.NewStream(ctx, &ChargingPointsService_ServiceDesc.Streams[0], "/api_proto.ChargingPointsService/StreamChargingStations", opts...)
	if err != nil {
		return nil, err
	}
	x := &chargingPointsServiceStreamChargingStationsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ChargingPointsService_StreamChargingStationsClient interface {
	Recv() (*LocationResponse, error)
	grpc.ClientStream
}

type chargingPointsServiceStreamChargingStationsClient struct {
	grpc.ClientStream
}

func (x *chargingPointsServiceStreamChargingStationsClient) Recv() (*LocationResponse, error) {
	m := new(LocationResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *chargingPointsServiceClient) StreamLocation(ctx context.Context, opts ...grpc.CallOption) (ChargingPointsService_StreamLocationClient, error) {
	stream, err := c.cc.NewStream(ctx, &ChargingPointsService_ServiceDesc.Streams[1], "/api_proto.ChargingPointsService/StreamLocation", opts...)
	if err != nil {
		return nil, err
	}
	x := &chargingPointsServiceStreamLocationClient{stream}
	return x, nil
}

type ChargingPointsService_StreamLocationClient interface {
	Send(*LocationRequest) error
	CloseAndRecv() (*LocationResponseList, error)
	grpc.ClientStream
}

type chargingPointsServiceStreamLocationClient struct {
	grpc.ClientStream
}

func (x *chargingPointsServiceStreamLocationClient) Send(m *LocationRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *chargingPointsServiceStreamLocationClient) CloseAndRecv() (*LocationResponseList, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(LocationResponseList)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *chargingPointsServiceClient) TrackLocations(ctx context.Context, opts ...grpc.CallOption) (ChargingPointsService_TrackLocationsClient, error) {
	stream, err := c.cc.NewStream(ctx, &ChargingPointsService_ServiceDesc.Streams[2], "/api_proto.ChargingPointsService/TrackLocations", opts...)
	if err != nil {
		return nil, err
	}
	x := &chargingPointsServiceTrackLocationsClient{stream}
	return x, nil
}

type ChargingPointsService_TrackLocationsClient interface {
	Send(*LocationRequest) error
	Recv() (*LocationResponse, error)
	grpc.ClientStream
}

type chargingPointsServiceTrackLocationsClient struct {
	grpc.ClientStream
}

func (x *chargingPointsServiceTrackLocationsClient) Send(m *LocationRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *chargingPointsServiceTrackLocationsClient) Recv() (*LocationResponse, error) {
	m := new(LocationResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ChargingPointsServiceServer is the server API for ChargingPointsService service.
// All implementations must embed UnimplementedChargingPointsServiceServer
// for forward compatibility
type ChargingPointsServiceServer interface {
	// Unary RPC method
	GetChargingStation(context.Context, *LocationRequest) (*LocationResponse, error)
	// Server-side streaming RPC method
	StreamChargingStations(*LocationRequest, ChargingPointsService_StreamChargingStationsServer) error
	// Client-side streaming RPC method
	StreamLocation(ChargingPointsService_StreamLocationServer) error
	// Bidirectional streaming RPC method
	TrackLocations(ChargingPointsService_TrackLocationsServer) error
	mustEmbedUnimplementedChargingPointsServiceServer()
}

// UnimplementedChargingPointsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedChargingPointsServiceServer struct {
}

func (UnimplementedChargingPointsServiceServer) GetChargingStation(context.Context, *LocationRequest) (*LocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChargingStation not implemented")
}
func (UnimplementedChargingPointsServiceServer) StreamChargingStations(*LocationRequest, ChargingPointsService_StreamChargingStationsServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamChargingStations not implemented")
}
func (UnimplementedChargingPointsServiceServer) StreamLocation(ChargingPointsService_StreamLocationServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamLocation not implemented")
}
func (UnimplementedChargingPointsServiceServer) TrackLocations(ChargingPointsService_TrackLocationsServer) error {
	return status.Errorf(codes.Unimplemented, "method TrackLocations not implemented")
}
func (UnimplementedChargingPointsServiceServer) mustEmbedUnimplementedChargingPointsServiceServer() {}

// UnsafeChargingPointsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChargingPointsServiceServer will
// result in compilation errors.
type UnsafeChargingPointsServiceServer interface {
	mustEmbedUnimplementedChargingPointsServiceServer()
}

func RegisterChargingPointsServiceServer(s grpc.ServiceRegistrar, srv ChargingPointsServiceServer) {
	s.RegisterService(&ChargingPointsService_ServiceDesc, srv)
}

func _ChargingPointsService_GetChargingStation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChargingPointsServiceServer).GetChargingStation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api_proto.ChargingPointsService/GetChargingStation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChargingPointsServiceServer).GetChargingStation(ctx, req.(*LocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChargingPointsService_StreamChargingStations_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(LocationRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChargingPointsServiceServer).StreamChargingStations(m, &chargingPointsServiceStreamChargingStationsServer{stream})
}

type ChargingPointsService_StreamChargingStationsServer interface {
	Send(*LocationResponse) error
	grpc.ServerStream
}

type chargingPointsServiceStreamChargingStationsServer struct {
	grpc.ServerStream
}

func (x *chargingPointsServiceStreamChargingStationsServer) Send(m *LocationResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ChargingPointsService_StreamLocation_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChargingPointsServiceServer).StreamLocation(&chargingPointsServiceStreamLocationServer{stream})
}

type ChargingPointsService_StreamLocationServer interface {
	SendAndClose(*LocationResponseList) error
	Recv() (*LocationRequest, error)
	grpc.ServerStream
}

type chargingPointsServiceStreamLocationServer struct {
	grpc.ServerStream
}

func (x *chargingPointsServiceStreamLocationServer) SendAndClose(m *LocationResponseList) error {
	return x.ServerStream.SendMsg(m)
}

func (x *chargingPointsServiceStreamLocationServer) Recv() (*LocationRequest, error) {
	m := new(LocationRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ChargingPointsService_TrackLocations_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChargingPointsServiceServer).TrackLocations(&chargingPointsServiceTrackLocationsServer{stream})
}

type ChargingPointsService_TrackLocationsServer interface {
	Send(*LocationResponse) error
	Recv() (*LocationRequest, error)
	grpc.ServerStream
}

type chargingPointsServiceTrackLocationsServer struct {
	grpc.ServerStream
}

func (x *chargingPointsServiceTrackLocationsServer) Send(m *LocationResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *chargingPointsServiceTrackLocationsServer) Recv() (*LocationRequest, error) {
	m := new(LocationRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ChargingPointsService_ServiceDesc is the grpc.ServiceDesc for ChargingPointsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChargingPointsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api_proto.ChargingPointsService",
	HandlerType: (*ChargingPointsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetChargingStation",
			Handler:    _ChargingPointsService_GetChargingStation_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamChargingStations",
			Handler:       _ChargingPointsService_StreamChargingStations_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamLocation",
			Handler:       _ChargingPointsService_StreamLocation_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "TrackLocations",
			Handler:       _ChargingPointsService_TrackLocations_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "server.proto",
}
