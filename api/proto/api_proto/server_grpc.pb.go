// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.22.2
// source: server.proto

package api_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LocationServiceClient is the client API for LocationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LocationServiceClient interface {
	// Unary RPC method
	GetChargingStation(ctx context.Context, in *LocationRequest, opts ...grpc.CallOption) (*LocationResponse, error)
	// Server-side streaming RPC method
	StreamChargingStations(ctx context.Context, in *LocationRequest, opts ...grpc.CallOption) (LocationService_StreamChargingStationsClient, error)
	// Server-side streaming RPC method
	StreamLocation(ctx context.Context, opts ...grpc.CallOption) (LocationService_StreamLocationClient, error)
	// Bidirectional streaming RPC method
	TrackLocations(ctx context.Context, opts ...grpc.CallOption) (LocationService_TrackLocationsClient, error)
}

type locationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLocationServiceClient(cc grpc.ClientConnInterface) LocationServiceClient {
	return &locationServiceClient{cc}
}

func (c *locationServiceClient) GetChargingStation(ctx context.Context, in *LocationRequest, opts ...grpc.CallOption) (*LocationResponse, error) {
	out := new(LocationResponse)
	err := c.cc.Invoke(ctx, "/api_proto.LocationService/GetChargingStation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locationServiceClient) StreamChargingStations(ctx context.Context, in *LocationRequest, opts ...grpc.CallOption) (LocationService_StreamChargingStationsClient, error) {
	stream, err := c.cc.NewStream(ctx, &LocationService_ServiceDesc.Streams[0], "/api_proto.LocationService/StreamChargingStations", opts...)
	if err != nil {
		return nil, err
	}
	x := &locationServiceStreamChargingStationsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type LocationService_StreamChargingStationsClient interface {
	Recv() (*LocationResponse, error)
	grpc.ClientStream
}

type locationServiceStreamChargingStationsClient struct {
	grpc.ClientStream
}

func (x *locationServiceStreamChargingStationsClient) Recv() (*LocationResponse, error) {
	m := new(LocationResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *locationServiceClient) StreamLocation(ctx context.Context, opts ...grpc.CallOption) (LocationService_StreamLocationClient, error) {
	stream, err := c.cc.NewStream(ctx, &LocationService_ServiceDesc.Streams[1], "/api_proto.LocationService/StreamLocation", opts...)
	if err != nil {
		return nil, err
	}
	x := &locationServiceStreamLocationClient{stream}
	return x, nil
}

type LocationService_StreamLocationClient interface {
	Send(*LocationRequest) error
	CloseAndRecv() (*LocationResponse, error)
	grpc.ClientStream
}

type locationServiceStreamLocationClient struct {
	grpc.ClientStream
}

func (x *locationServiceStreamLocationClient) Send(m *LocationRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *locationServiceStreamLocationClient) CloseAndRecv() (*LocationResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(LocationResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *locationServiceClient) TrackLocations(ctx context.Context, opts ...grpc.CallOption) (LocationService_TrackLocationsClient, error) {
	stream, err := c.cc.NewStream(ctx, &LocationService_ServiceDesc.Streams[2], "/api_proto.LocationService/TrackLocations", opts...)
	if err != nil {
		return nil, err
	}
	x := &locationServiceTrackLocationsClient{stream}
	return x, nil
}

type LocationService_TrackLocationsClient interface {
	Send(*LocationRequest) error
	Recv() (*LocationResponse, error)
	grpc.ClientStream
}

type locationServiceTrackLocationsClient struct {
	grpc.ClientStream
}

func (x *locationServiceTrackLocationsClient) Send(m *LocationRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *locationServiceTrackLocationsClient) Recv() (*LocationResponse, error) {
	m := new(LocationResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LocationServiceServer is the server API for LocationService service.
// All implementations must embed UnimplementedLocationServiceServer
// for forward compatibility
type LocationServiceServer interface {
	// Unary RPC method
	GetChargingStation(context.Context, *LocationRequest) (*LocationResponse, error)
	// Server-side streaming RPC method
	StreamChargingStations(*LocationRequest, LocationService_StreamChargingStationsServer) error
	// Server-side streaming RPC method
	StreamLocation(LocationService_StreamLocationServer) error
	// Bidirectional streaming RPC method
	TrackLocations(LocationService_TrackLocationsServer) error
	mustEmbedUnimplementedLocationServiceServer()
}

// UnimplementedLocationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLocationServiceServer struct {
}

func (UnimplementedLocationServiceServer) GetChargingStation(context.Context, *LocationRequest) (*LocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChargingStation not implemented")
}
func (UnimplementedLocationServiceServer) StreamChargingStations(*LocationRequest, LocationService_StreamChargingStationsServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamChargingStations not implemented")
}
func (UnimplementedLocationServiceServer) StreamLocation(LocationService_StreamLocationServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamLocation not implemented")
}
func (UnimplementedLocationServiceServer) TrackLocations(LocationService_TrackLocationsServer) error {
	return status.Errorf(codes.Unimplemented, "method TrackLocations not implemented")
}
func (UnimplementedLocationServiceServer) mustEmbedUnimplementedLocationServiceServer() {}

// UnsafeLocationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LocationServiceServer will
// result in compilation errors.
type UnsafeLocationServiceServer interface {
	mustEmbedUnimplementedLocationServiceServer()
}

func RegisterLocationServiceServer(s grpc.ServiceRegistrar, srv LocationServiceServer) {
	s.RegisterService(&LocationService_ServiceDesc, srv)
}

func _LocationService_GetChargingStation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationServiceServer).GetChargingStation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api_proto.LocationService/GetChargingStation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationServiceServer).GetChargingStation(ctx, req.(*LocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocationService_StreamChargingStations_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(LocationRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LocationServiceServer).StreamChargingStations(m, &locationServiceStreamChargingStationsServer{stream})
}

type LocationService_StreamChargingStationsServer interface {
	Send(*LocationResponse) error
	grpc.ServerStream
}

type locationServiceStreamChargingStationsServer struct {
	grpc.ServerStream
}

func (x *locationServiceStreamChargingStationsServer) Send(m *LocationResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _LocationService_StreamLocation_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LocationServiceServer).StreamLocation(&locationServiceStreamLocationServer{stream})
}

type LocationService_StreamLocationServer interface {
	SendAndClose(*LocationResponse) error
	Recv() (*LocationRequest, error)
	grpc.ServerStream
}

type locationServiceStreamLocationServer struct {
	grpc.ServerStream
}

func (x *locationServiceStreamLocationServer) SendAndClose(m *LocationResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *locationServiceStreamLocationServer) Recv() (*LocationRequest, error) {
	m := new(LocationRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _LocationService_TrackLocations_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LocationServiceServer).TrackLocations(&locationServiceTrackLocationsServer{stream})
}

type LocationService_TrackLocationsServer interface {
	Send(*LocationResponse) error
	Recv() (*LocationRequest, error)
	grpc.ServerStream
}

type locationServiceTrackLocationsServer struct {
	grpc.ServerStream
}

func (x *locationServiceTrackLocationsServer) Send(m *LocationResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *locationServiceTrackLocationsServer) Recv() (*LocationRequest, error) {
	m := new(LocationRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LocationService_ServiceDesc is the grpc.ServiceDesc for LocationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LocationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api_proto.LocationService",
	HandlerType: (*LocationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetChargingStation",
			Handler:    _LocationService_GetChargingStation_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamChargingStations",
			Handler:       _LocationService_StreamChargingStations_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamLocation",
			Handler:       _LocationService_StreamLocation_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "TrackLocations",
			Handler:       _LocationService_TrackLocations_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "server.proto",
}
